// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Medicament.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Medicament TABLE
class TableMedicament extends SqfEntityTableBase {
  TableMedicament() {
    // declare properties of EntityTable
    tableName = 'medicaments';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('medicamentId', DbType.integer),
      SqfEntityFieldBase('imageSrc', DbType.text),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('country', DbType.text, defaultValue: 'Russia'),
      SqfEntityFieldBase('price', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMedicament();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class AptekaDbModel extends SqfEntityModelProvider {
  AptekaDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableMedicament.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Medicament
class Medicament extends TableBase {
  Medicament(
      {this.id,
      this.medicamentId,
      this.imageSrc,
      this.name,
      this.country,
      this.price}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Medicament.withFields(this.id, this.medicamentId, this.imageSrc, this.name,
      this.country, this.price) {
    _setDefaultValues();
  }
  Medicament.withId(this.id, this.medicamentId, this.imageSrc, this.name,
      this.country, this.price) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Medicament.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['medicamentId'] != null) {
      medicamentId = int.tryParse(o['medicamentId'].toString());
    }
    if (o['imageSrc'] != null) {
      imageSrc = o['imageSrc'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['country'] != null) {
      country = o['country'].toString();
    }
    if (o['price'] != null) {
      price = o['price'].toString();
    }

    isSaved = true;
  }
  // FIELDS (Medicament)
  int? id;
  int? medicamentId;
  String? imageSrc;
  String? name;
  String? country;
  String? price;
  bool? isSaved;
  // end FIELDS (Medicament)

  static const bool _softDeleteActivated = false;
  MedicamentManager? __mnMedicament;

  MedicamentManager get _mnMedicament {
    return __mnMedicament = __mnMedicament ?? MedicamentManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (medicamentId != null || !forView) {
      map['medicamentId'] = medicamentId;
    }
    if (imageSrc != null || !forView) {
      map['imageSrc'] = imageSrc;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (country != null || !forView) {
      map['country'] = country;
    }
    if (price != null || !forView) {
      map['price'] = price;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (medicamentId != null || !forView) {
      map['medicamentId'] = medicamentId;
    }
    if (imageSrc != null || !forView) {
      map['imageSrc'] = imageSrc;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (country != null || !forView) {
      map['country'] = country;
    }
    if (price != null || !forView) {
      map['price'] = price;
    }

    return map;
  }

  /// This method returns Json String [Medicament]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Medicament]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [id, medicamentId, imageSrc, name, country, price];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, medicamentId, imageSrc, name, country, price];
  }

  static Future<List<Medicament>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Medicament.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Medicament>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Medicament>[];
    try {
      objList = list
          .map((medicament) =>
              Medicament.fromMap(medicament as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Medicament.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Medicament>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Medicament> objList = <Medicament>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Medicament.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Medicament by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Medicament] if exist, otherwise returns null
  Future<Medicament?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Medicament? obj;
    final data = await _mnMedicament.getById([id]);
    if (data.length != 0) {
      obj = Medicament.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Medicament) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnMedicament.insert(this, ignoreBatch);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      await _mnMedicament.update(this);
    }

    return id;
  }

  /// Saves the (Medicament) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnMedicament.insertOrThrow(this, ignoreBatch);
      if (saveResult != null && saveResult!.success) {
        isSaved = true;
      }
      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnMedicament.updateOrThrow(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Medicament> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Medicament> medicaments,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await AptekaDbModel().batchStart();
    for (final obj in medicaments) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await AptekaDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnMedicament.rawInsert(
          'INSERT OR REPLACE INTO medicaments (id, medicamentId, imageSrc, name, country, price)  VALUES (?,?,?,?,?,?)',
          [id, medicamentId, imageSrc, name, country, price],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Medicament id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Medicament id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Medicament Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Medicament>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Medicament> medicaments,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnMedicament.rawInsertAll(
        'INSERT OR REPLACE INTO medicaments (id, medicamentId, imageSrc, name, country, price)  VALUES (?,?,?,?,?,?)',
        medicaments,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Medicament

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Medicament invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnMedicament
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnMedicament.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Medicament] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  MedicamentFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MedicamentFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  MedicamentFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MedicamentFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    country = country ?? 'Russia';
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion medicament

// region MedicamentField
class MedicamentField extends FilterBase {
  MedicamentField(MedicamentFilterBuilder medicamentFB) : super(medicamentFB);

  @override
  MedicamentFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder isNull() {
    return super.isNull() as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as MedicamentFilterBuilder;
  }

  @override
  MedicamentFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as MedicamentFilterBuilder;
  }

  @override
  MedicamentField get not {
    return super.not as MedicamentField;
  }
}
// endregion MedicamentField

// region MedicamentFilterBuilder
class MedicamentFilterBuilder extends ConjunctionBase {
  MedicamentFilterBuilder(Medicament obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnMedicament = obj._mnMedicament;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  MedicamentManager? _mnMedicament;

  /// put the sql keyword 'AND'
  @override
  MedicamentFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  MedicamentFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  MedicamentFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  MedicamentFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  MedicamentFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  MedicamentFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  MedicamentFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MedicamentFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MedicamentFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MedicamentFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MedicamentFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  MedicamentField _setField(
      MedicamentField? field, String colName, DbType dbtype) {
    return MedicamentField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  MedicamentField? _id;
  MedicamentField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  MedicamentField? _medicamentId;
  MedicamentField get medicamentId {
    return _medicamentId =
        _setField(_medicamentId, 'medicamentId', DbType.integer);
  }

  MedicamentField? _imageSrc;
  MedicamentField get imageSrc {
    return _imageSrc = _setField(_imageSrc, 'imageSrc', DbType.text);
  }

  MedicamentField? _name;
  MedicamentField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  MedicamentField? _country;
  MedicamentField get country {
    return _country = _setField(_country, 'country', DbType.text);
  }

  MedicamentField? _price;
  MedicamentField get price {
    return _price = _setField(_price, 'price', DbType.text);
  }

  /// Deletes List<Medicament> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnMedicament!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnMedicament!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from medicaments ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnMedicament!.updateBatch(qparams, values);
  }

  /// This method always returns [Medicament] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Medicament?
  @override
  Future<Medicament?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnMedicament!.toList(qparams);
    final data = await objFuture;
    Medicament? obj;
    if (data.isNotEmpty) {
      obj = Medicament.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Medicament]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Medicament?
  @override
  Future<Medicament> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Medicament();
  }

  /// This method returns int. [Medicament]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? medicamentCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final medicamentsFuture = await _mnMedicament!.toList(qparams);
    final int count = medicamentsFuture[0]['CNT'] as int;
    if (medicamentCount != null) {
      medicamentCount(count);
    }
    return count;
  }

  /// This method returns List<Medicament> [Medicament]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Medicament>
  @override
  Future<List<Medicament>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Medicament> medicamentsData = await Medicament.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return medicamentsData;
  }

  /// This method returns Json String [Medicament]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Medicament]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Medicament]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnMedicament!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Medicament]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM medicaments WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnMedicament!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Medicament]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnMedicament!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Medicament.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnMedicament!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MedicamentFilterBuilder

// region MedicamentFields
class MedicamentFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fMedicamentId;
  static TableField get medicamentId {
    return _fMedicamentId = _fMedicamentId ??
        SqlSyntax.setField(_fMedicamentId, 'medicamentId', DbType.integer);
  }

  static TableField? _fImageSrc;
  static TableField get imageSrc {
    return _fImageSrc =
        _fImageSrc ?? SqlSyntax.setField(_fImageSrc, 'imageSrc', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fCountry;
  static TableField get country {
    return _fCountry =
        _fCountry ?? SqlSyntax.setField(_fCountry, 'country', DbType.text);
  }

  static TableField? _fPrice;
  static TableField get price {
    return _fPrice =
        _fPrice ?? SqlSyntax.setField(_fPrice, 'price', DbType.text);
  }
}
// endregion MedicamentFields

//region MedicamentManager
class MedicamentManager extends SqfEntityProvider {
  MedicamentManager()
      : super(AptekaDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'medicaments';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion MedicamentManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await AptekaDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await AptekaDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await AptekaDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class AptekaDbModelSequenceManager extends SqfEntityProvider {
  AptekaDbModelSequenceManager() : super(AptekaDbModel());
}
// END OF ENTITIES
